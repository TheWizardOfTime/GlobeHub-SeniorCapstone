#!/usr/bin/env node

// ///////////////////////////////////////////////////////// //
//  Globehub Server Code - Running on the Express Framework  //
// ///////////////////////////////////////////////////////// //




/** NOTE:
 * Most of these module dependencies are included when using the Express-Generator 
 * module, and are incldued for the convenience of those using Express as a server/router
 * framework. It is not necessary to use Express when implementing a server in Node.js, and 
 * there are Node.js core modules that allow one to implement a server; however, for my
 * sake I decided to use Express to remove the need to fully deal with CORS and HTTP protocols,
 * as they added a level of complexity to my project that I did not fully understand at the time.
 */



/** Require Modules for Server-Side Functionality **/

/*======== Included with Express Genrator ==============*/
var express = require('express');
var http = require('http');
var path = require('path');
var expressSession = require('express-session');
var MongoStore = require('connect-mongo')(expressSession);
var favicon = require('serve-favicon');
var logger = require('morgan');

/*========= Required for my purposes from NPM ==========*/

var cookie    = require('cookie');
var signature = require('cookie-signature');
var cookieParser = require('cookie-parser');
var bodyParser = require('body-parser');
var flash = require('connect-flash');
var passport = require('passport');
var fs = require('fs');

/*==================== My Own Modules ==================*/

var routes = require('./routes/index')(passport);
var db = require('./database');
var test = require('./local_modules/dombatch');
var webscraper = require('./local_modules/webscraper');
var initPassport = require('./passport/init');

/*============== Application-Server Code ===============*/

/** Initialize application and persistant session storage **/
var app = express(),
    name   = 'connect.sid',
    secret = '<mysecret>',
    store = new MongoStore({ mongooseConnection: db });

app.io = require('socket.io')();

/** A good deal of the Following code is automatically generated by
 *  Express-Generator, and is used to set up the server, according 
 *  to Express 4.x specifications
 */ 

/* view engine setup */ 
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

/** **/
app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());
app.use(express.static(path.join(__dirname, 'public')));

/* configure express session */
app.use( expressSession( 
                        { 'secret': secret, 
                          'name' : name,
                          'saveUninitialized' : true, 
                          'resave': true , 
                          'store' : store
                        }));

/* authenticate user with passport */
app.use( passport.initialize( ) );
app.use( passport.session( ) );

/* using flash middle-ware */
app.use(flash());

/* Initialize Passport! */
initPassport( passport );

/* set the route to root becuase this should be a SPA ( Single-Page-Application ) */
app.use('/', routes);

/* have our application connect to the locally running MongoDB instance */
app.use( function( req , res , next ){
  req.db = db;
  next( );
});

/** Error Handlers **/

/* development error handler - will print stack trace */
if (app.get('env') === 'development') {
	app.use(function(err, req, res, next) {
	  res.status(err.status || 500);
	  res.render('error', {
	    message: err.message,
	    error: err
	  });
	});
}

/* catch 404 and forward to error handler */
app.use(function(req, res, next) {
	var err = new Error('Not Found');
	err.status = 404;
	next(err);
});

/* production error handler - no stacktraces leaked to user */
app.use(function(err, req, res, next) {
	res.status(err.status || 500);
	res.render('error', {
	  message: err.message,
	  error: {}
	});
});

module.exports = app;


// //////////////////////////////////////////// //
//  Code Involving the use of socket.io Module  //
// //////////////////////////////////////////// //


/** Start Listening with socket.io **/

app.io.on( 'connection', function(socket) {

  var session_user;

  console.log('Web-Socket Connected');

  /** Hacky Solution to getting the session ID, to correspond with the User Id.
   *  Was pieced together by reading a lot of stackoverflow posts.
   */

  if (socket.handshake && socket.handshake.headers && socket.handshake.headers.cookie) {
    var raw = cookie.parse(socket.handshake.headers.cookie)[name];

    if (raw) {
      /** The cookie set by express-session begins with s: which indicates it
       *  is a signed cookie. Remove the two characters before unsigning.
       */ 
      socket.sessionId = signature.unsign(raw.slice(2), secret) || undefined;
    }
  }

  if ( socket.sessionId ) {
    store.get(socket.sessionId, function(err, session) {
      session_user = session.passport.user;
    });
  }

  /** Validation of our Web-Scraped URLs to make sure our Website is ready for production
   *  If any of the Web-Scrapers do not work, then our site will not render the main UI.
   */

  socket.on('initialize' , function( data ) {
    console.log('Validating...');
    test.validate( function ( response ) {
      console.log('Finished!');
      if( !response ) {
        socket.emit('validation' , { 'msg': ' Globehub is currently undergoing maintainance, in the mean time use google ' , 'response': response } )
      } else {
        // console.log( response );
        socket.emit('validation' , { 'msg': ' Loading...' , 'response': response } )

        db.model('User').findById( session_user , function( error , user_doc ) {

          console.log(user_doc);

          if (!error) {
            // if( doc.find({pocket: {$not: { $size: 0}}}) ){}

            /** Mongoose populate calls are used to deliver content to our Client.
             *  A document can only be populated if there is a reference ObjectID associated
             *  In our Database, otherwise the populate call will return 'undefined'.
             */
            user_doc.populate('pocket', function (err, doc ) { 
              console.log(doc);
            })
          };
        });
      }
    });  
  });

  /* date and time for application */

  setInterval( function( ) {

       socket.emit('date', {'date': new Date( ) } );

    } , 1000 );

  /* constantly send validation for clients every hour on the hour */

  // setInterval( function( ) {
  //   test.validate( function ( response ) {
  //     if( !response ) {
  //       socket.emit('validation' , {'response': response })
  //     } else {
  //       socket.emit('validation' , {'response': response })
  //     }
  //   } );  
  // }, 3600000 );

  
  // /////////////////////////////////////// //
  //  Calls to Web-Scrapper on User Request  //
  // /////////////////////////////////////// //

  socket.on( 'send-info' , function( data ) {
    webscraper.getNewsNow( data.info.newsnow , function(news){
      webscraper.getProfileBBC( data.info.bbc , function(bbc){
        webscraper.getProfileIM( data.info.im , function(im){
          socket.emit('receive-info',{'info':{'country':data.info.name,'news':news,'profiles':{'bbc':bbc,'im':im}}});
        });
      });
    });
  });

  // ////////////////////////////////////////////// //
  //  Database Implementation for our Application   //
  // ////////////////////////////////////////////// //

  socket.on('make-pocket' , function( data ) {

    db.model('User').findById( session_user , function ( error , user_doc ) {

      if (!error) {

        /* Creates Pocket ODM and gives it requested name*/
        var Pocket = db.model('Pocket');
        var pocket = new Pocket({'name': data.pname});

        /* Adds new pocket ObjectID reference to the current User document with our given name */
        user_doc.pocket.push(pocket);

        /** It is necessary to save a nested ObjectID reference to the Database within 
         *  nested function calls, otherwise our calls to populate will return undefined.
         */

        user_doc.save(function (err) {
          if (!err) { 
            pocket.save(function (err) {
              if (!err){
                console.log('saved!');
                socket.emit('user_message',{'message':'Pocket Successfully created!'});
              }
            });
          }
        });
      } else {
          console.log('Uh oh there was and Error!' + error ); 
          socket.emit('user_message', {'message':'There was an error, we are working on fixing it'}); 
        }
    });
  });


  socket.on('add-articles' , function( data ) { 

    db.model('User').findById( session_user , function ( error , user_doc ) {

      if(!error) {
        var Article = db.model('Article');

      }
    });
  });
});
